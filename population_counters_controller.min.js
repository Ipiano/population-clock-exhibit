function PopCountersViewController(e, b, c, a, f, d) {
  this.api = e;
  this.animator = b;
  this.usPopContainerID = c;
  this.usComponentsID = a;
  this.usPop;
  this.worldPop;
  this.worldPopContainerID = f;
  this.stripPopulation = false;
  this.useOdometers = isDefined(d) ? d : true;
  this.progressBars = [];
  this.progressBarTrackColorLight = "90-#cecdc9:50-#b9b8b4";
  this.progressBarBarColorLight = "90-#1782d0:49-#167ece:50-#208fd7:51-#269ddd";
  this.progressBarBarColorDark = "90-#07497B:49-#06426F:50-#095381:51-#3784AB";
  this.headerDateLabel = $("#" + this.usPopContainerID)
    .parent()
    .parent()
    .children("div:eq(0)")
    .children("p:eq(0)");
  this.displayDateFormat = "MM d, yy";
  this.usPopulationCounter = new Population(this.usPopContainerID);
  this.worldPopulationCounter = new Population(this.worldPopContainerID);
  this.timeStampLabel;
  this.timeStampCounter = new Counter(
    0,
    Counter.rate_per_millisecond(1, 1, Counter.milliseconds_per_unit("second"))
  );
  this.now = function () {
    return new Date();
  };
  this.now_utc = function () {
    var g = this.now();
    return new Date(
      g.getUTCFullYear(),
      g.getUTCMonth(),
      g.getUTCDate(),
      g.getUTCHours(),
      g.getUTCMinutes(),
      g.getUTCSeconds()
    );
  };
}
PopCountersViewController.prototype = {
  createViews: function (e, c, l, a, o, i, m) {
    var b = $.Deferred();
    var h = this;
    var j = !e ? 270 : e;
    var n = !c ? 115 : c;
    var d = !d ? 15 : d;
    this.setDateLabel(this.headerDateLabel);
    var k = h.stripPopulation
      ? config.components.us.label.replace("Population", "")
      : config.components.us.label;
    h.usPopulationCounter.setContainerLabel(k);
    var g = this.getJSON("us");
    var f = this.getJSON("world");
    $.when(g, f).then(function (r, q) {
      this.usPop = r.us.population;
      h.createUSView(r.us, a, o, i, m, c, l);
      var p = h.stripPopulation
        ? config.components.world.label.replace("Population", "")
        : config.components.world.label;
      h.worldPopulationCounter.setContainerLabel(p);
      h.createWorldView(
        q.world,
        config.components.world_rates.tables,
        a,
        o,
        i,
        m
      );
      b.resolve();
    });
    return b;
  },
  createWidgetViews: function (e, c, l, a, o, i, m) {
    var b = $.Deferred();
    var h = this;
    var j = !e ? 270 : e;
    var n = !c ? 115 : c;
    var d = !d ? 15 : d;
    this.setDateLabel(this.headerDateLabel);
    var k = h.stripPopulation
      ? config.components.us.label.replace("Population", "")
      : config.components.us.label;
    h.usPopulationCounter.setContainerLabel(k);
    var g = this.getJSON("us");
    var f = this.getJSON("world");
    $.when(g, f).then(function (r, q) {
      this.usPop = r.us.population;
      $("#us_pop_widget").text(addCommas(r.us.midnight_pop));
      $("#world_pop_widget").text(addCommas(q.world.pop_midnight));
      var p = h.stripPopulation
        ? config.components.world.label.replace("Population", "")
        : config.components.world.label;
      h.worldPopulationCounter.setContainerLabel(p);
      h.createWorldView(
        // q.world has population, population_rate, rate_interval
        q.world,
        config.components.world_rates.tables,
        a,
        o,
        i,
        m
      );
      b.resolve();
    });
    return b;
  },
  setDateLabel: function (l) {
    var b = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    var g = this.now_utc();
    var i = b[g.getMonth()];
    var c = g.getDate();
    var j = g.getFullYear();
    var f = g.getHours();
    var e = g.getMinutes();
    var d = g.getTimezoneOffset();
    var k = d / -60;
    var h = "";
    if (k == -5) {
      h = "Eastern";
    }
    var a = -k;
    l.text(
      i +
        " " +
        zeroFill(c, 2) +
        ", " +
        j +
        " " +
        zeroFill(f, 2) +
        ":" +
        zeroFill(e, 2) +
        " UTC (" +
        h +
        "+" +
        a +
        ")"
    );
  },
  createUSView: function (e, c, h, g, b, f, d) {
    if (this.useOdometers) {
      console.log("population = " + e.population);
      console.log("population_rate = " + e.population_rate);
      console.log("rate_interval = " + e.rate_interval);
      this.usPopulationCounter.buildOdometer(
        this.animator,
        new Counter(
          e.population,
          Counter.rate_per_millisecond(
            e.population_rate,
            1,
            Counter.milliseconds_per_unit(e.rate_interval)
          )
        ),
        b.main,
        c,
        h,
        g,
        b.reverse_text
      );
    } else {
      $("#" + this.usPopContainerID + " p:eq(0)").append(
        addCommas(e.population)
      );
    }
    var a = {
      headerLabels: [
        config.components.us_rates.table_header_labels[0],
        config.components.us_rates.table_header_labels[1],
      ],
      rows: [
        {
          counter: new Counter(
            0,
            Counter.rate_per_millisecond(
              1,
              e.components.birth_rate.interval,
              Counter.milliseconds_per_unit(e.components.birth_rate.unit)
            )
          ),
          label: config.components.us.birth_rate_label.replace(
            "%@",
            e.components.birth_rate.interval
          ),
        },
        {
          counter: new Counter(
            0,
            Counter.rate_per_millisecond(
              1,
              e.components.death_rate.interval,
              Counter.milliseconds_per_unit(e.components.death_rate.unit)
            )
          ),
          label: config.components.us.death_rate_label.replace(
            "%@",
            e.components.death_rate.interval
          ),
        },
        {
          counter: new Counter(
            0,
            Counter.rate_per_millisecond(
              1,
              e.components.immigrant_rate.interval,
              Counter.milliseconds_per_unit(e.components.immigrant_rate.unit)
            )
          ),
          label: config.components.us.immigrant_rate_label.replace(
            "%@",
            e.components.immigrant_rate.interval
          ),
        },
        {
          counter: new Counter(
            0,
            Counter.rate_per_millisecond(
              e.population_rate,
              1,
              Counter.milliseconds_per_unit(e.rate_interval)
            )
          ),
          label: config.components.us.net_gain_label.replace(
            "%@",
            Math.round(1 / e.population_rate)
          ),
        },
      ],
    };
    this.createRateTable(
      $("#" + this.usComponentsID).find("table"),
      config.components.us_rates.table_summary,
      a,
      f
    );
  },
  createRateTable: function (o, b, c, e, n) {
    var j = this;
    var h = o.find("thead");
    var a = o.find("tbody");
    var d = c.rows;
    o.attr("summary", b);
    var k =
      '<tr><th scope="row">' +
      c.headerLabels[0] +
      "</th><th>" +
      c.headerLabels[1] +
      "</th></tr>";
    h.append(k);
    var m =
      '<tr><td></td><td id="component-timestamp">' +
      this.getUTCStringForNow() +
      "</td></tr>";
    a.append(m);
    if (a && c.rows) {
      for (var g = 0; g < c.rows.length; g++) {
        var p = c.rows[g];
        var l = new PopulationComponent("#" + this.usComponentsID, p.rate);
        var f = "pop-counter-progress-bar-" + this.progressBars.length;
        l.initWithLabelTextBarID(p.label, f);
        l.buildProgressBar(
          this.animator,
          p.counter,
          f,
          "html-progress-bar-track",
          "html-progress-bar-bar",
          g == 1
        );
        this.progressBars.push(l.progressBar);
      }
    }
    this.animator.add(function () {
      j.updateTimeStamp();
    });
  },
  getUTCStringForNow: function () {
    var c = this.now_utc();
    var a = zeroFill(c.getHours(), 2);
    var d = zeroFill(c.getMinutes(), 2);
    var b = zeroFill(c.getSeconds(), 2);
    return a + ":" + d + ":" + b + " UTC";
  },
  createWorldView: function (d, g, a, j, f, i) {
    var e = this;
    var k = $("#world-pop-historical");
    var c = k.find("table:eq(0)");
    var b = k.find("table:eq(1)");
    if (this.useOdometers) {
      this.worldPopulationCounter.buildOdometer(
        this.animator,
        new Counter(
          d.population,
          Counter.rate_per_millisecond(
            d.population_rate,
            1,
            Counter.milliseconds_per_unit(d.rate_interval)
          )
        ),
        i.main,
        a,
        j,
        f,
        i.reverse_text
      );
    } else {
      $("#" + this.worldPopContainerID + " p:eq(0)").append(
        addCommas(d.population)
      );
    }
    var h = this.createWorldTable(g[0]);
    $table1HTML = $(h).attr(
      "summary",
      config.components.world_rates.table1_summary
    );
    c.replaceWith($table1HTML);
  },
  createWorldTable: function (c) {
    var g = "<table>";
    g += "<thead>";
    g += '<tr><th colspan="6">' + c.title + "</th></tr>";
    g +=
      "<tr><th>" +
      c.columns[0] +
      "</th><th>" +
      c.columns[1] +
      "</th><th>" +
      c.columns[2] +
      ". " +
      c.columns[3] +
      "</th><th>" +
      +"</th></tr>";
    g += "</thead>";
    g += "<tbody>";
    var m = [];
    var d = [];
    for (var l in c.rows) {
      m.push(l);
      d.push(addCommas(c.rows[l]));
    }
    var k = Math.ceil(m.length / 2);
    var a = m.slice(0, k);
    var j = d.slice(0, k);
    var h = m.slice(k);
    var b = d.slice(k);
    for (var f = 0; f < a.length; f++) {
      var e = f + 1;
      g +=
        "<tr><td>" +
        e +
        ". " +
        a[f] +
        '</td><td align="right">' +
        j[f] +
        "</td><td>&nbsp;&nbsp;" +
        (e + 5) +
        ". " +
        h[f] +
        '</td><td align="right">' +
        b[f] +
        "</td></tr>";
    }
    g += "</tbody>";
    g += "</table>";
    return g;
  },
  getJSON: function (a) {
    return this.api.get(a, {}, function (b, e, d, c) {
      c.resolve(b);
    });
  },
  getCSV: function () {
    var c = this;
    var d = $.Deferred();
    var b = [];
    var a = this.getJSON("us");
    a.done(function (g) {
      var f = {
        title: config.components.us.label,
        data: [
          ["Population: " + addCommas(g.us.population)],
          [
            config.components.us.birth_rate_label
              .replace("%@", g.us.components.birth_rate.interval)
              .replace(/<[^>]+>/g, ""),
          ],
          [
            config.components.us.death_rate_label
              .replace("%@", g.us.components.death_rate.interval)
              .replace(/<[^>]+>/g, ""),
          ],
          [
            config.components.us.immigrant_rate_label
              .replace("%@", g.us.components.immigrant_rate.interval)
              .replace(/<[^>]+>/g, ""),
          ],
          [
            config.components.us.net_gain_label
              .replace("%@", Math.round(1 / g.us.population_rate))
              .replace(/<[^>]+>/g, ""),
          ],
          ["Date: " + g.us.date],
        ],
      };
      b.push(f);
      var e = c.getJSON("world");
      e.done(function (m) {
        var k = {
          title: config.components.world.label,
          data: [["Population:" + addCommas(m.world.population), ""]],
        };
        k.data.push([""]);
        k.data.push(["Top 10 Most Populous Countries (July 1, 2021)"]);
        k.data.push(["Rank,  Country, Population"]);
        k.data.push([""]);
        var n = config.components.world_rates.tables[0].rows;
        var h = Object.keys(n);
        var l = Object.keys(n).map(function (i) {
          return n[i];
        });
        for (var j = 0; j < l.length; j++) {
          var o = j + 1;
          k.data.push([o + "," + h[j] + "," + l[j]]);
        }
        b.push(k);
        d.resolve(b);
      });
    });
    return d;
  },
  updateTimeStamp: function () {
    if (!this.useOdometers) {
      return;
    }
    this.timeStampCounter.update();
    if (this.timeStampCounter.changed()) {
      this.setDateLabel(this.headerDateLabel);
      if (this.timeStampLabel) {
        this.timeStampLabel.text(this.getUTCStringForNow());
      } else {
        if (
          $(
            "#" +
              popCountersViewController.usComponentsID +
              " #component-timestamp"
          ).length > 0
        ) {
          this.timeStampLabel = $(
            "#" +
              popCountersViewController.usComponentsID +
              " #component-timestamp"
          );
          this.timeStampLabel.text(this.getUTCStringForNow());
        }
      }
    }
  },
};
